{"ast":null,"code":"import { createUserWithEmailAndPassword, signInWithEmailAndPassword, getAuth } from \"firebase/auth\";\nimport { auth, db } from \"../../config/firebase\";\nimport { authActions } from \"../reducers/authReducer\";\nimport { toast } from \"react-toastify\";\nimport { doc, setDoc } from \"firebase/firestore\";\nconst getSerializableUser = user => ({\n  uid: user.uid,\n  email: user.email,\n  displayName: user.displayName,\n  photoURL: user.photoURL,\n  emailVerified: user.emailVerified\n});\nexport const register = (email, password) => async dispatch => {\n  dispatch(authActions.signupStart());\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    const simpleUser = getSerializableUser(user);\n\n    // Add user to Firestore\n    await setDoc(doc(db, \"users\", user.uid), {\n      uid: user.uid,\n      email: user.email,\n      password: password,\n      // Note: storing raw password is not recommended!\n      signinDate: new Date().toISOString()\n    });\n    dispatch(authActions.signupSuccess(simpleUser));\n    toast.success(\"Signup successful!\");\n  } catch (error) {\n    dispatch(authActions.signupFailure(error.message));\n    toast.error(error.message);\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  dispatch(authActions.signupStart());\n  try {\n    const auth = getAuth();\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const simpleUser = getSerializableUser(userCredential.user);\n    dispatch(authActions.signupSuccess(simpleUser));\n    toast.success(\"Login successful!\");\n  } catch (error) {\n    dispatch(authActions.signupFailure(error.message));\n    toast.error(error.message);\n  }\n};","map":{"version":3,"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","getAuth","auth","db","authActions","toast","doc","setDoc","getSerializableUser","user","uid","email","displayName","photoURL","emailVerified","register","password","dispatch","signupStart","userCredential","simpleUser","signinDate","Date","toISOString","signupSuccess","success","error","signupFailure","message","login"],"sources":["C:/Users/wadhe/OneDrive/Desktop/study/complete placment/Redux/project/scaffold/src/redux/actions/authActions.js"],"sourcesContent":["import { createUserWithEmailAndPassword, signInWithEmailAndPassword, getAuth } from \"firebase/auth\";\r\nimport { auth ,db} from \"../../config/firebase\";\r\nimport { authActions } from \"../reducers/authReducer\";\r\nimport { toast } from \"react-toastify\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\n\r\nconst getSerializableUser = (user) => ({\r\n  uid: user.uid,\r\n  email: user.email,\r\n  displayName: user.displayName,\r\n  photoURL: user.photoURL,\r\n  emailVerified: user.emailVerified,\r\n});\r\n\r\nexport const register = (email, password) => async (dispatch) => {\r\n  dispatch(authActions.signupStart());\r\n  try {\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    const user = userCredential.user;\r\n    const simpleUser = getSerializableUser(user);\r\n\r\n    // Add user to Firestore\r\n    await setDoc(doc(db, \"users\", user.uid), {\r\n      uid: user.uid,\r\n      email: user.email,\r\n      password: password, // Note: storing raw password is not recommended!\r\n      signinDate: new Date().toISOString(),\r\n    });\r\n\r\n    dispatch(authActions.signupSuccess(simpleUser));\r\n    toast.success(\"Signup successful!\");\r\n  } catch (error) {\r\n    dispatch(authActions.signupFailure(error.message));\r\n    toast.error(error.message);\r\n  }\r\n};\r\n\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n  dispatch(authActions.signupStart());\r\n  try {\r\n    const auth = getAuth();\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    const simpleUser = getSerializableUser(userCredential.user);\r\n    dispatch(authActions.signupSuccess(simpleUser));\r\n    toast.success(\"Login successful!\");\r\n  } catch (error) {\r\n    dispatch(authActions.signupFailure(error.message));\r\n    toast.error(error.message);\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,8BAA8B,EAAEC,0BAA0B,EAAEC,OAAO,QAAQ,eAAe;AACnG,SAASC,IAAI,EAAEC,EAAE,QAAO,uBAAuB;AAC/C,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,GAAG,EAAEC,MAAM,QAAQ,oBAAoB;AAEhD,MAAMC,mBAAmB,GAAIC,IAAI,KAAM;EACrCC,GAAG,EAAED,IAAI,CAACC,GAAG;EACbC,KAAK,EAAEF,IAAI,CAACE,KAAK;EACjBC,WAAW,EAAEH,IAAI,CAACG,WAAW;EAC7BC,QAAQ,EAAEJ,IAAI,CAACI,QAAQ;EACvBC,aAAa,EAAEL,IAAI,CAACK;AACtB,CAAC,CAAC;AAEF,OAAO,MAAMC,QAAQ,GAAGA,CAACJ,KAAK,EAAEK,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAC/DA,QAAQ,CAACb,WAAW,CAACc,WAAW,CAAC,CAAC,CAAC;EACnC,IAAI;IACF,MAAMC,cAAc,GAAG,MAAMpB,8BAA8B,CAACG,IAAI,EAAES,KAAK,EAAEK,QAAQ,CAAC;IAClF,MAAMP,IAAI,GAAGU,cAAc,CAACV,IAAI;IAChC,MAAMW,UAAU,GAAGZ,mBAAmB,CAACC,IAAI,CAAC;;IAE5C;IACA,MAAMF,MAAM,CAACD,GAAG,CAACH,EAAE,EAAE,OAAO,EAAEM,IAAI,CAACC,GAAG,CAAC,EAAE;MACvCA,GAAG,EAAED,IAAI,CAACC,GAAG;MACbC,KAAK,EAAEF,IAAI,CAACE,KAAK;MACjBK,QAAQ,EAAEA,QAAQ;MAAE;MACpBK,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACrC,CAAC,CAAC;IAEFN,QAAQ,CAACb,WAAW,CAACoB,aAAa,CAACJ,UAAU,CAAC,CAAC;IAC/Cf,KAAK,CAACoB,OAAO,CAAC,oBAAoB,CAAC;EACrC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdT,QAAQ,CAACb,WAAW,CAACuB,aAAa,CAACD,KAAK,CAACE,OAAO,CAAC,CAAC;IAClDvB,KAAK,CAACqB,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;EAC5B;AACF,CAAC;AAGD,OAAO,MAAMC,KAAK,GAAGA,CAAClB,KAAK,EAAEK,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAC5DA,QAAQ,CAACb,WAAW,CAACc,WAAW,CAAC,CAAC,CAAC;EACnC,IAAI;IACF,MAAMhB,IAAI,GAAGD,OAAO,CAAC,CAAC;IACtB,MAAMkB,cAAc,GAAG,MAAMnB,0BAA0B,CAACE,IAAI,EAAES,KAAK,EAAEK,QAAQ,CAAC;IAC9E,MAAMI,UAAU,GAAGZ,mBAAmB,CAACW,cAAc,CAACV,IAAI,CAAC;IAC3DQ,QAAQ,CAACb,WAAW,CAACoB,aAAa,CAACJ,UAAU,CAAC,CAAC;IAC/Cf,KAAK,CAACoB,OAAO,CAAC,mBAAmB,CAAC;EACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdT,QAAQ,CAACb,WAAW,CAACuB,aAAa,CAACD,KAAK,CAACE,OAAO,CAAC,CAAC;IAClDvB,KAAK,CAACqB,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;EAC5B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}