{"ast":null,"code":"// cartActions.js\nimport { db } from '../../config/firebase';\nimport { collection, getDocs } from 'firebase/firestore';\nimport { setCartItems, setIsProductsLoaded } from '../reducers/cartReducer';\nexport const addProductsToCart = (product, userId) => async dispatch => {\n  try {\n    const querySnapshot = await getDocs(collection(db, `users/${userId}/cart`));\n    const products = querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n\n    // Add the new product to the cart\n    products.push(product);\n    dispatch(setCartItems(products));\n    dispatch(setIsProductsLoaded(true));\n  } catch (error) {\n    console.error(\"Error fetching cart items:\", error);\n    dispatch(setIsProductsLoaded(false));\n  }\n};\nexport const removeProductFromCart = productId => async (dispatch, getState) => {\n  try {\n    const currentCart = getState().cartReducer.cart;\n    const updatedCart = currentCart.filter(item => item.id !== productId);\n    dispatch(setCartItems(updatedCart));\n  } catch (error) {\n    console.error(\"Error removing product from cart:\", error);\n  }\n};","map":{"version":3,"names":["db","collection","getDocs","setCartItems","setIsProductsLoaded","addProductsToCart","product","userId","dispatch","querySnapshot","products","docs","map","doc","id","data","push","error","console","removeProductFromCart","productId","getState","currentCart","cartReducer","cart","updatedCart","filter","item"],"sources":["C:/Users/wadhe/OneDrive/Desktop/study/complete placment/Redux/project/scaffold/src/redux/actions/cartActions.js"],"sourcesContent":["// cartActions.js\r\nimport { db } from '../../config/firebase';\r\nimport { collection, getDocs } from 'firebase/firestore';\r\nimport { setCartItems, setIsProductsLoaded } from '../reducers/cartReducer';\r\n\r\nexport const addProductsToCart = (product, userId) => async (dispatch) => {\r\n    try {\r\n      const querySnapshot = await getDocs(collection(db, `users/${userId}/cart`));\r\n      const products = querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n  \r\n      // Add the new product to the cart\r\n      products.push(product);\r\n  \r\n      dispatch(setCartItems(products));\r\n      dispatch(setIsProductsLoaded(true));\r\n    } catch (error) {\r\n      console.error(\"Error fetching cart items:\", error);\r\n      dispatch(setIsProductsLoaded(false));\r\n    }\r\n  };\r\n  \r\n\r\nexport const removeProductFromCart = (productId) => async (dispatch, getState) => {\r\n  try {\r\n    const currentCart = getState().cartReducer.cart;\r\n    const updatedCart = currentCart.filter(item => item.id !== productId);\r\n    dispatch(setCartItems(updatedCart));\r\n  } catch (error) {\r\n    console.error(\"Error removing product from cart:\", error);\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,SAASA,EAAE,QAAQ,uBAAuB;AAC1C,SAASC,UAAU,EAAEC,OAAO,QAAQ,oBAAoB;AACxD,SAASC,YAAY,EAAEC,mBAAmB,QAAQ,yBAAyB;AAE3E,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,OAAO,EAAEC,MAAM,KAAK,MAAOC,QAAQ,IAAK;EACtE,IAAI;IACF,MAAMC,aAAa,GAAG,MAAMP,OAAO,CAACD,UAAU,CAACD,EAAE,EAAE,SAASO,MAAM,OAAO,CAAC,CAAC;IAC3E,MAAMG,QAAQ,GAAGD,aAAa,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,KAAK;MAC9CC,EAAE,EAAED,GAAG,CAACC,EAAE;MACV,GAAGD,GAAG,CAACE,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;;IAEH;IACAL,QAAQ,CAACM,IAAI,CAACV,OAAO,CAAC;IAEtBE,QAAQ,CAACL,YAAY,CAACO,QAAQ,CAAC,CAAC;IAChCF,QAAQ,CAACJ,mBAAmB,CAAC,IAAI,CAAC,CAAC;EACrC,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClDT,QAAQ,CAACJ,mBAAmB,CAAC,KAAK,CAAC,CAAC;EACtC;AACF,CAAC;AAGH,OAAO,MAAMe,qBAAqB,GAAIC,SAAS,IAAK,OAAOZ,QAAQ,EAAEa,QAAQ,KAAK;EAChF,IAAI;IACF,MAAMC,WAAW,GAAGD,QAAQ,CAAC,CAAC,CAACE,WAAW,CAACC,IAAI;IAC/C,MAAMC,WAAW,GAAGH,WAAW,CAACI,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACb,EAAE,KAAKM,SAAS,CAAC;IACrEZ,QAAQ,CAACL,YAAY,CAACsB,WAAW,CAAC,CAAC;EACrC,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;EAC3D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}