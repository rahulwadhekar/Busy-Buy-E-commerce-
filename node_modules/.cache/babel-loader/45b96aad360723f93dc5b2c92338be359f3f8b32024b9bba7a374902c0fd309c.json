{"ast":null,"code":"import { addDataToCollection } from '../../utils/utils';\nimport { db } from '../../config/firebase';\nimport { collection, getDocs } from 'firebase/firestore';\nimport { setProducts, setIsProductsLoaded } from '../reducers/productsReducer';\nexport const addProductsToFirebase = () => async dispatch => {\n  try {\n    await addDataToCollection();\n    dispatch(setIsProductsLoaded(true));\n    console.log(addDataToCollection());\n  } catch (error) {\n    console.error('Error adding products to Firebase:', error);\n  }\n};\nexport const fetchProductsFromFirebase = () => async dispatch => {\n  try {\n    const productsRef = collection(db, 'products');\n    const snapshot = await getDocs(productsRef);\n    const products = snapshot.docs.map(doc => doc.data());\n    dispatch(setProducts(products));\n  } catch (error) {\n    console.error('Error fetching products from Firebase:', error);\n  }\n};","map":{"version":3,"names":["addDataToCollection","db","collection","getDocs","setProducts","setIsProductsLoaded","addProductsToFirebase","dispatch","console","log","error","fetchProductsFromFirebase","productsRef","snapshot","products","docs","map","doc","data"],"sources":["C:/Users/wadhe/OneDrive/Desktop/study/complete placment/Redux/project/scaffold/src/redux/actions/productsAction.js"],"sourcesContent":["\r\nimport { addDataToCollection } from '../../utils/utils';\r\nimport { db } from '../../config/firebase';\r\nimport { collection, getDocs } from 'firebase/firestore';\r\nimport { setProducts,setIsProductsLoaded } from '../reducers/productsReducer';\r\n\r\nexport const addProductsToFirebase = () => async (dispatch) => {\r\n    try {\r\n      await addDataToCollection();\r\n      dispatch(setIsProductsLoaded(true)); \r\n\r\n      console.log(addDataToCollection())\r\n    } catch (error) {\r\n      console.error('Error adding products to Firebase:', error);\r\n    }\r\n  };\r\n  \r\n  export const fetchProductsFromFirebase = () => async (dispatch) => {\r\n    try {\r\n      const productsRef = collection(db, 'products');\r\n      const snapshot = await getDocs(productsRef);\r\n      const products = snapshot.docs.map(doc => doc.data());\r\n      dispatch(setProducts(products)); \r\n    } catch (error) {\r\n      console.error('Error fetching products from Firebase:', error);\r\n    }\r\n  };"],"mappings":"AACA,SAASA,mBAAmB,QAAQ,mBAAmB;AACvD,SAASC,EAAE,QAAQ,uBAAuB;AAC1C,SAASC,UAAU,EAAEC,OAAO,QAAQ,oBAAoB;AACxD,SAASC,WAAW,EAACC,mBAAmB,QAAQ,6BAA6B;AAE7E,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EAC3D,IAAI;IACF,MAAMP,mBAAmB,CAAC,CAAC;IAC3BO,QAAQ,CAACF,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAEnCG,OAAO,CAACC,GAAG,CAACT,mBAAmB,CAAC,CAAC,CAAC;EACpC,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;EAC5D;AACF,CAAC;AAED,OAAO,MAAMC,yBAAyB,GAAGA,CAAA,KAAM,MAAOJ,QAAQ,IAAK;EACjE,IAAI;IACF,MAAMK,WAAW,GAAGV,UAAU,CAACD,EAAE,EAAE,UAAU,CAAC;IAC9C,MAAMY,QAAQ,GAAG,MAAMV,OAAO,CAACS,WAAW,CAAC;IAC3C,MAAME,QAAQ,GAAGD,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;IACrDX,QAAQ,CAACH,WAAW,CAACU,QAAQ,CAAC,CAAC;EACjC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;EAChE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}