{"ast":null,"code":"import { createUserWithEmailAndPassword, signInWithEmailAndPassword, getAuth } from \"firebase/auth\";\nimport { auth } from \"../../config/firebase\";\nimport { authActions } from \"../reducers/authReducer\";\nimport { toast } from \"react-toastify\";\n\n// Extract only serializable user info\nconst getSerializableUser = user => ({\n  uid: user.uid,\n  email: user.email,\n  displayName: user.displayName,\n  photoURL: user.photoURL,\n  emailVerified: user.emailVerified\n});\nexport const register = (email, password) => async dispatch => {\n  dispatch(authActions.signupStart());\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const simpleUser = getSerializableUser(userCredential.user);\n    dispatch(authActions.signupSuccess(simpleUser));\n    toast.success(\"Signup successful!\");\n  } catch (error) {\n    dispatch(authActions.signupFailure(error.message));\n    toast.error(error.message);\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  dispatch(authActions.signupStart());\n  try {\n    const auth = getAuth();\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const simpleUser = getSerializableUser(userCredential.user);\n    dispatch(authActions.signupSuccess(simpleUser));\n    toast.success(\"Login successful!\");\n  } catch (error) {\n    dispatch(authActions.signupFailure(error.message));\n    toast.error(error.message);\n  }\n};","map":{"version":3,"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","getAuth","auth","authActions","toast","getSerializableUser","user","uid","email","displayName","photoURL","emailVerified","register","password","dispatch","signupStart","userCredential","simpleUser","signupSuccess","success","error","signupFailure","message","login"],"sources":["C:/Users/wadhe/OneDrive/Desktop/study/complete placment/Redux/project/scaffold/src/redux/actions/authActions.js"],"sourcesContent":["import { createUserWithEmailAndPassword, signInWithEmailAndPassword, getAuth } from \"firebase/auth\";\r\nimport { auth } from \"../../config/firebase\";\r\nimport { authActions } from \"../reducers/authReducer\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Extract only serializable user info\r\nconst getSerializableUser = (user) => ({\r\n  uid: user.uid,\r\n  email: user.email,\r\n  displayName: user.displayName,\r\n  photoURL: user.photoURL,\r\n  emailVerified: user.emailVerified,\r\n});\r\n\r\nexport const register = (email, password) => async (dispatch) => {\r\n  dispatch(authActions.signupStart());\r\n  try {\r\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n    const simpleUser = getSerializableUser(userCredential.user);\r\n    dispatch(authActions.signupSuccess(simpleUser));\r\n    toast.success(\"Signup successful!\");\r\n  } catch (error) {\r\n    dispatch(authActions.signupFailure(error.message));\r\n    toast.error(error.message);\r\n  }\r\n};\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n  dispatch(authActions.signupStart());\r\n  try {\r\n    const auth = getAuth();\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    const simpleUser = getSerializableUser(userCredential.user);\r\n    dispatch(authActions.signupSuccess(simpleUser));\r\n    toast.success(\"Login successful!\");\r\n  } catch (error) {\r\n    dispatch(authActions.signupFailure(error.message));\r\n    toast.error(error.message);\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,8BAA8B,EAAEC,0BAA0B,EAAEC,OAAO,QAAQ,eAAe;AACnG,SAASC,IAAI,QAAQ,uBAAuB;AAC5C,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,KAAK,QAAQ,gBAAgB;;AAEtC;AACA,MAAMC,mBAAmB,GAAIC,IAAI,KAAM;EACrCC,GAAG,EAAED,IAAI,CAACC,GAAG;EACbC,KAAK,EAAEF,IAAI,CAACE,KAAK;EACjBC,WAAW,EAAEH,IAAI,CAACG,WAAW;EAC7BC,QAAQ,EAAEJ,IAAI,CAACI,QAAQ;EACvBC,aAAa,EAAEL,IAAI,CAACK;AACtB,CAAC,CAAC;AAEF,OAAO,MAAMC,QAAQ,GAAGA,CAACJ,KAAK,EAAEK,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAC/DA,QAAQ,CAACX,WAAW,CAACY,WAAW,CAAC,CAAC,CAAC;EACnC,IAAI;IACF,MAAMC,cAAc,GAAG,MAAMjB,8BAA8B,CAACG,IAAI,EAAEM,KAAK,EAAEK,QAAQ,CAAC;IAClF,MAAMI,UAAU,GAAGZ,mBAAmB,CAACW,cAAc,CAACV,IAAI,CAAC;IAC3DQ,QAAQ,CAACX,WAAW,CAACe,aAAa,CAACD,UAAU,CAAC,CAAC;IAC/Cb,KAAK,CAACe,OAAO,CAAC,oBAAoB,CAAC;EACrC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdN,QAAQ,CAACX,WAAW,CAACkB,aAAa,CAACD,KAAK,CAACE,OAAO,CAAC,CAAC;IAClDlB,KAAK,CAACgB,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;EAC5B;AACF,CAAC;AAED,OAAO,MAAMC,KAAK,GAAGA,CAACf,KAAK,EAAEK,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAC5DA,QAAQ,CAACX,WAAW,CAACY,WAAW,CAAC,CAAC,CAAC;EACnC,IAAI;IACF,MAAMb,IAAI,GAAGD,OAAO,CAAC,CAAC;IACtB,MAAMe,cAAc,GAAG,MAAMhB,0BAA0B,CAACE,IAAI,EAAEM,KAAK,EAAEK,QAAQ,CAAC;IAC9E,MAAMI,UAAU,GAAGZ,mBAAmB,CAACW,cAAc,CAACV,IAAI,CAAC;IAC3DQ,QAAQ,CAACX,WAAW,CAACe,aAAa,CAACD,UAAU,CAAC,CAAC;IAC/Cb,KAAK,CAACe,OAAO,CAAC,mBAAmB,CAAC;EACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdN,QAAQ,CAACX,WAAW,CAACkB,aAAa,CAACD,KAAK,CAACE,OAAO,CAAC,CAAC;IAClDlB,KAAK,CAACgB,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;EAC5B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}