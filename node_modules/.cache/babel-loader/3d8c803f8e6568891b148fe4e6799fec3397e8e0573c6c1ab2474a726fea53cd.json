{"ast":null,"code":"import data from \"./data\";\nimport { doc, writeBatch, query, where, getDocs, collection, getDoc } from \"firebase/firestore\";\nimport { db } from \"../config/firebase\";\n\n// Add data to the products collection only for one time so that they can be used again.\nconst addDataToCollection = async () => {\n  try {\n    const batch = writeBatch(db);\n    data.forEach(product => {\n      const docRef = doc(db, \"products\", product.id.toString());\n      batch.set(docRef, product);\n    });\n    const res = await batch.commit();\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// Fetch products from firestore based on their ids\nconst getProductsUsingProductIds = async cart => {\n  const productIds = Object.keys(cart).map(Number);\n  if (!productIds.length) {\n    return false;\n  }\n  const productsRef = collection(db, \"products\");\n  const productsSnapshot = await getDocs(query(productsRef, where(\"id\", \"in\", productIds)));\n  const productsData = productsSnapshot.docs.map(doc => ({\n    ...doc.data(),\n    date: cart === null || cart === void 0 ? void 0 : cart.date,\n    quantity: cart[doc.data().id]\n  }));\n  return productsData;\n};\n\n// Fetch users cart products from firestore\nconst getUserCartProducts = async uid => {\n  const docRef = doc(db, \"usersCarts\", uid);\n  const docSnap = await getDoc(docRef);\n  return {\n    docRef,\n    data: docSnap.data()\n  };\n};\n\n// Simple function to format date\nconst convertDate = date => {\n  return new Date(date).toISOString().split(\"T\")[0];\n};\nexport { addDataToCollection, getProductsUsingProductIds, getUserCartProducts, convertDate };","map":{"version":3,"names":["data","doc","writeBatch","query","where","getDocs","collection","getDoc","db","addDataToCollection","batch","forEach","product","docRef","id","toString","set","res","commit","error","console","log","getProductsUsingProductIds","cart","productIds","Object","keys","map","Number","length","productsRef","productsSnapshot","productsData","docs","date","quantity","getUserCartProducts","uid","docSnap","convertDate","Date","toISOString","split"],"sources":["C:/Users/wadhe/OneDrive/Desktop/study/complete placment/Redux/project/scaffold/src/utils/utils.js"],"sourcesContent":["import data from \"./data\";\r\nimport {\r\n  doc,\r\n  writeBatch,\r\n  query,\r\n  where,\r\n  getDocs,\r\n  collection,\r\n  getDoc,\r\n} from \"firebase/firestore\";\r\nimport { db } from \"../config/firebase\";\r\n\r\n// Add data to the products collection only for one time so that they can be used again.\r\nconst addDataToCollection = async () => {\r\n  try {\r\n    const batch = writeBatch(db);\r\n    data.forEach((product) => {\r\n      const docRef = doc(db, \"products\", product.id.toString());\r\n      batch.set(docRef, product);\r\n    });\r\n\r\n    const res = await batch.commit();\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// Fetch products from firestore based on their ids\r\nconst getProductsUsingProductIds = async (cart) => {\r\n  const productIds = Object.keys(cart).map(Number);\r\n  if (!productIds.length) {\r\n    return false;\r\n  }\r\n\r\n  const productsRef = collection(db, \"products\");\r\n\r\n  const productsSnapshot = await getDocs(\r\n    query(productsRef, where(\"id\", \"in\", productIds))\r\n  );\r\n\r\n  const productsData = productsSnapshot.docs.map((doc) => ({\r\n    ...doc.data(),\r\n    date: cart?.date,\r\n    quantity: cart[doc.data().id],\r\n  }));\r\n\r\n  return productsData;\r\n};\r\n\r\n// Fetch users cart products from firestore\r\nconst getUserCartProducts = async (uid) => {\r\n  const docRef = doc(db, \"usersCarts\", uid);\r\n  const docSnap = await getDoc(docRef);\r\n  return { docRef, data: docSnap.data() };\r\n};\r\n\r\n// Simple function to format date\r\nconst convertDate = (date) => {\r\n  return new Date(date).toISOString().split(\"T\")[0];\r\n};\r\n\r\nexport {\r\n  addDataToCollection,\r\n  getProductsUsingProductIds,\r\n  getUserCartProducts,\r\n  convertDate,\r\n};\r\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,SACEC,GAAG,EACHC,UAAU,EACVC,KAAK,EACLC,KAAK,EACLC,OAAO,EACPC,UAAU,EACVC,MAAM,QACD,oBAAoB;AAC3B,SAASC,EAAE,QAAQ,oBAAoB;;AAEvC;AACA,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMC,KAAK,GAAGR,UAAU,CAACM,EAAE,CAAC;IAC5BR,IAAI,CAACW,OAAO,CAAEC,OAAO,IAAK;MACxB,MAAMC,MAAM,GAAGZ,GAAG,CAACO,EAAE,EAAE,UAAU,EAAEI,OAAO,CAACE,EAAE,CAACC,QAAQ,CAAC,CAAC,CAAC;MACzDL,KAAK,CAACM,GAAG,CAACH,MAAM,EAAED,OAAO,CAAC;IAC5B,CAAC,CAAC;IAEF,MAAMK,GAAG,GAAG,MAAMP,KAAK,CAACQ,MAAM,CAAC,CAAC;EAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;;AAED;AACA,MAAMG,0BAA0B,GAAG,MAAOC,IAAI,IAAK;EACjD,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAACI,GAAG,CAACC,MAAM,CAAC;EAChD,IAAI,CAACJ,UAAU,CAACK,MAAM,EAAE;IACtB,OAAO,KAAK;EACd;EAEA,MAAMC,WAAW,GAAGxB,UAAU,CAACE,EAAE,EAAE,UAAU,CAAC;EAE9C,MAAMuB,gBAAgB,GAAG,MAAM1B,OAAO,CACpCF,KAAK,CAAC2B,WAAW,EAAE1B,KAAK,CAAC,IAAI,EAAE,IAAI,EAAEoB,UAAU,CAAC,CAClD,CAAC;EAED,MAAMQ,YAAY,GAAGD,gBAAgB,CAACE,IAAI,CAACN,GAAG,CAAE1B,GAAG,KAAM;IACvD,GAAGA,GAAG,CAACD,IAAI,CAAC,CAAC;IACbkC,IAAI,EAAEX,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,IAAI;IAChBC,QAAQ,EAAEZ,IAAI,CAACtB,GAAG,CAACD,IAAI,CAAC,CAAC,CAACc,EAAE;EAC9B,CAAC,CAAC,CAAC;EAEH,OAAOkB,YAAY;AACrB,CAAC;;AAED;AACA,MAAMI,mBAAmB,GAAG,MAAOC,GAAG,IAAK;EACzC,MAAMxB,MAAM,GAAGZ,GAAG,CAACO,EAAE,EAAE,YAAY,EAAE6B,GAAG,CAAC;EACzC,MAAMC,OAAO,GAAG,MAAM/B,MAAM,CAACM,MAAM,CAAC;EACpC,OAAO;IAAEA,MAAM;IAAEb,IAAI,EAAEsC,OAAO,CAACtC,IAAI,CAAC;EAAE,CAAC;AACzC,CAAC;;AAED;AACA,MAAMuC,WAAW,GAAIL,IAAI,IAAK;EAC5B,OAAO,IAAIM,IAAI,CAACN,IAAI,CAAC,CAACO,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC;AAED,SACEjC,mBAAmB,EACnBa,0BAA0B,EAC1Bc,mBAAmB,EACnBG,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}